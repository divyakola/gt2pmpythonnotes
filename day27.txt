shallow copy:
-------------
we can implement the shallow copy by using following ways,

	1).by using builtin functions

	2).by using builtin methods

	3).by using comprihension

	4).by using copy() of copy module

whenever we are implement the shallow copy,in that case both original data and copied data are referenceing to different objects in the memory.

in single dimensional,we can change the original data that is not effected in our copied data and vice-versa.

in multi-dimensional,we can change the original data that is effected in our copied data and vice-versa.

by using builtin functions
--------------------------
>>> x=[1,2,3]
>>> y=list(x)
>>> x
[1, 2, 3]
>>> y
[1, 2, 3]
>>> id(x)
2761999007104
>>> id(y)
2761999271616

by using builtin methods
------------------------
>>> a=[1,2,3]
>>> b=a.copy()
>>> a
[1, 2, 3]
>>> b
[1, 2, 3]
>>> id(a)
2761999246720
>>> id(b)
2761999246144

by using comprihension
----------------------
>>> p=[1,2,3]
>>> q=[i for i in p]
>>> p
[1, 2, 3]
>>> q
[1, 2, 3]
>>> id(p)
2761999002944
>>> id(q)
2761999271872

by using copy() of copy module
------------------------------
>>> import copy
>>> x=[1,2,3]
>>> y=copy.copy(x)
>>> x
[1, 2, 3]
>>> y
[1, 2, 3]
>>> id(x)
2761999440576
>>> id(y)
2761999007104


ex:
---
>>> import copy
>>> a=[1,2,3,[4,5,[6,7]]]
>>> b=copy.copy(a)
>>> a
[1, 2, 3, [4, 5, [6, 7]]]
>>> b
[1, 2, 3, [4, 5, [6, 7]]]
>>> a[1]=20
>>> a
[1, 20, 3, [4, 5, [6, 7]]]
>>> b
[1, 2, 3, [4, 5, [6, 7]]]
>>> b[0]=10
>>> b
[10, 2, 3, [4, 5, [6, 7]]]
>>> a
[1, 20, 3, [4, 5, [6, 7]]]
>>> a[3][1]=50
>>> a
[1, 20, 3, [4, 50, [6, 7]]]
>>> b
[10, 2, 3, [4, 50, [6, 7]]]
>>> b[-1][-1][-1]=70
>>> b
[10, 2, 3, [4, 50, [6, 70]]]
>>> a
[1, 20, 3, [4, 50, [6, 70]]]

Deep copy
----------
we can implement the deep copy by using deepcopy() of copy module.

whenever we are implement the deep copy,in that case both original data and copied data are referenceing to different objects in the memory.

in single dimensional,we can change the original data that is not effected in our copied data and vice-versa.

in multi-dimensional,we can change the original data that is not effected in our copied data and vice-versa.

ex:
---
>>> import copy
>>> x=[1,2,3,[4,5,[6,7]]]
>>> y=copy.deepcopy(x)
>>> x
[1, 2, 3, [4, 5, [6, 7]]]
>>> y
[1, 2, 3, [4, 5, [6, 7]]]
>>> id(x)
2761999251200
>>> id(y)
2761999440576
>>> x[1]=20
>>> x
[1, 20, 3, [4, 5, [6, 7]]]
>>> y
[1, 2, 3, [4, 5, [6, 7]]]
>>> y[0]=10
>>> y
[10, 2, 3, [4, 5, [6, 7]]]
>>> x
[1, 20, 3, [4, 5, [6, 7]]]
>>> x[3][1]=50
>>> x
[1, 20, 3, [4, 50, [6, 7]]]
>>> y
[10, 2, 3, [4, 5, [6, 7]]]
>>> y[-1][-1][-1]=70
>>> y
[10, 2, 3, [4, 5, [6, 70]]]
>>> x
[1, 20, 3, [4, 50, [6, 7]]]

how to delete an object?
------------------------
	we can delete the objects manually by using 'del' keyword.


>>> y=[3,2,5]
>>> y
[3, 2, 5]
>>> del y
>>> y
NameError: name 'y' is not defined

>>> x=34
>>> x
34
>>> del x
>>> x
NameError: name 'x' is not defined

		Function's
		----------
what is Function?
-----------------
	a function is a block of organized,reusable code to perform a single operation.

		(or)

	a function is a syntaxer structure,which is used to represent the business logics to perform a particular operation.

function is not executed autoatically,whenever we are calling a function then only function logic will be executed.

we can call the function by using functionname()

advantages:
-----------
functions provides reusability of code
functions provides better modularity of our applications.

type of functions:
------------------
in generally,python functions can be categorized into 2 types,they are

	1).builtin/predefined functions

	2).user-defined functions.


builtin/predefined functions:
-----------------------------
	these functions are laready predefined for some special purpose,we can use that word/function only for that particular purpose.

ex:
---
how to display builtin functions in python?

import builtins
for ele in dir(builtins):
    if ele.isalpha():
        if ele[0].islower():
            print(ele)


builtin functions examples:
--------------------------
abs()
-----
to return the absolute value of the given numerical value.

	abs(numerical value)

>>> abs(5)
5
>>> abs(-3)
3
>>> abs(2.3)
2.3
>>> abs(-3.1)
3.1
>>> abs(2+3j)
3.605551275463989

all()
----
if all the elements are True in our iterable object then-only the all() to return True otherwise the all() to return False.

	all(iterableobj)

0 means False

except 0 we can take any value,that value treated as a True

>>> x=[5,2.3,4j,"siva"]
>>> y=[9,0,3.2,6j]
>>> z=[0,9,False]
>>> a=[0,False]
>>> b="siva"
>>> c=3
>>> all(x)
True
>>> all(y)
False
>>> all(z)
False
>>> all(a)
False
>>> all(b)
True
>>> all(c)
TypeError: 'int' object is not iterable

any()
----
if any one element is True the any() to return True otherwise the any() to return False.

	any(iterableobj)

>>> x=[5,2.3,4j,"siva"]
>>> y=[9,0,3.2,6j]
>>> z=[0,9,False]
>>> a=[0,False]
>>> b="siva"
>>> c=3
>>> any(x)
True
>>> any(y)
True
>>> any(z)
True
>>> any(a)
False
>>> any(b)
True
>>> any(c)
TypeError: 'int' object is not iterable

bytes()
-------
to return the bytes object,the bytes object is a immutable object.

	
>>> x=[4,9,23,76]
>>> x
[4, 9, 23, 76]
>>> y=bytes(x)
>>> y
b'\x04\t\x17L'
>>> type(y)
<class 'bytes'>
>>> y[1]
9
>>> y[1]=90
TypeError: 'bytes' object does not support item assignment


bytearray()
-----------
the bytearray() to return the bytearray object,the bytearray object is a mutable object.

>>> x=[4,9,23,76]
>>> x
[4, 9, 23, 76]
>>> z=bytearray(x)
>>> z
bytearray(b'\x04\t\x17L')
>>> type(z)
<class 'bytearray'>
>>> z[1]
9
>>> z[1]=90
>>> z
bytearray(b'\x04Z\x17L')

eval()
------
to read the multiple values with homogenious and hetrogenious.

the eval() internally to perform type conversions

in eval() the values are seperated by ',' only

ex:
---
x,y,z=eval(input("enter x,y,z values: "))
print(x+y+z)

output1:
-------
enter x,y,z values: 3,4,5
12

output2:
-------
enter x,y,z values: 2.3,4.5,2.3
9.1

output3:
-------
enter x,y,z values: 3j,2+3j,6+2j
(8+8j)

output4:
-------
enter x,y,z values: 3,2.4,4j
(5.4+4j)

pow()
-----
to return the power of the given two numbers.

	pow(x,y)	--> x**y

	pow(x,y,z)	--> x**y%z

>>> pow(2,3)
8
>>> pow(3,2)
9
>>> pow(2,3,3)
2
>>> pow(3,2,2)
1
>>> pow(3,2,3)
0
>>> pow(3)
TypeError: pow() missing required argument 'exp' (pos 2)

>>> pow(3,2,2,1)
TypeError: pow() takes at most 3 arguments (4 given)

round()
------
to return the round figure value of the given number.

	round(number,noofdigits)

example in python2.x
-------------------
>>> round(2.49)
2.0
>>> round(2.50)
3.0
>>> round(2.51)
3.0

example in python3.x
--------------------
round(2.49)
2

round(2.50)
2

round(2.51)
3

ex:
---
>>> round(2.342312)
2
>>> round(2.342312,1)
2.3
>>> round(2.342312,2)
2.34
>>> round(2.342312,3)
2.342
>>> round(2.342312,4)
2.3423



















	
















