ex4:
----
create a normal function to check wheather given number is positive or negative or zero?

num=int(input("enter your number: "))
def pnz(x):
    if x>0:
        return "Positive"
    else:
        if x<0:
            return "Negative"
        else:
            return "Zero"
print(pnz(num))



outputs:
-------
enter your number: 3
Positive

enter your number: -6
Negative

enter your number: 0
Zero

create a anonymus(lambda) function to check wheather given number is positive or negative or zero?

num=int(input("enter your number: "))
pnz=lambda x: "Positive" if x>0 else "Negative"\
     if x<0 else "Zero"
print(pnz(num))

outputs:
------
enter your number: 4
Positive

enter your number: -2
Negative

enter your number: 0
Zero

use cases of lambda keyword:
----------------------------
the lambda keyword is used to create a nameless/anonymus functions with in a short period of time.

the lambda keyword is used to create a single-line functions.

the lambda keyword is used in higher-order functions
			      ------------
				   |
	a function takes parameters as a another function.

the builtin higher-order function's are filter(),map() and reduce()

working with filter()
---------------------
the filter() is a builtin function in both python2.x and python3.x versions.

the filter() to return the filter object.

	filter(function,iterableobj)


the filter() takes the one by one element from our iterable object,to check the condition,whenever condition is True the filter() to return that value/element otherwise the      filter() ignore that value/element.

ex1:
----
x=[3,2,4,7,9,8,6,1]
y=filter(lambda i:i%2==0,x)
print(y)
print(type(y))
for ele in y:
    print(ele)

output:
-------
<filter object at 0x0000026664D96D10>
<class 'filter'>
2
4
8
6

ex2:
----
print(list(filter(lambda i:i%2==0,[3,2,4,7,9,8,6,1])))

output:
------
[2, 4, 8, 6]


map()
-----
the map() is a builtin function in both python2.x and python3.x versions.

the map() to return the map object.

	map(function,*iterableobj)


the map() takes the one by one element from our iterable object,to perform the operation and return the result.

ex1:
----
x=[3,2,4,7,9,8,6,1]
y=map(lambda i:i%2==0,x)
print(y)
print(type(y))
for ele in y:
    print(ele)

output:
------
<map object at 0x000001E8965F6D10>
<class 'map'>
False
True
True
False
False
True
True
False

ex2:
----
print(list(map(lambda i:i%2==0,[3,2,4,7,9,8,6,1])))
print(list(map(lambda i:i+2,[3,2,4,7,9,8,6,1])))

output:
------
[False, True, True, False, False, True, True, False]
[5, 4, 6, 9, 11, 10, 8, 3]

ex3:
----
wap to perform addition of two list object elements?

x=[1,2,3]
y=[4,5,6]
z=[]
for i,j in zip(x,y):
    z.append(i+j)
print(z)
    
	(or)

print(list(map(lambda i,j:i+j,[1,2,3],[4,5,6])))

output:
------
[5, 7, 9]

ex4:
----
wap to perform the addition of two numbers?

input:
	4,5

output:
	9

x,y=eval(input())
print(x+y)


ex5:
----
wap to perform the addition of two numbers?

input:
	4 5

output:
	9


x,y=input().split()
print(int(x)+int(y))

      (or)

x,y=map(int,input().split())
print(x+y)


reduce()
-------
the reduce() to reduce the no.of elements into single value.

	reduce(function,iterableobj)

in python2.x,the reduce() is a builtin function but in python3.x,the reduce() is not a builtin function.

example in python2.x
-------------------

print(reduce(lambda i,j:i+j,[4,3,6,2]))

output:
-----
15

example in python3.x
----------------------
print(reduce(lambda i,j:i+j,[4,3,6,2]))

output:
------
NameError: name 'reduce' is not defined

ex2:
----
from functools import reduce
print(reduce(lambda i,j:i+j,[4,3,6,2]))

	(or)

import functools 
print(functools.reduce(lambda i,j:i+j,[4,3,6,2]))

	(or)

from functools import *
print(reduce(lambda i,j:i+j,[4,3,6,2]))

output:
-----
15















