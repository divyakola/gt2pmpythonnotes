mixing of both non-keyword and keyword arguments:
-------------------------------------------------
def msg(x,y):
    print(x,"siva",y)
msg("hai",y="good afternoon")

output:
------
hai siva good afternoon

mixing of both keyword and non-keyword arguments:
-------------------------------------------------
def msg(x,y):
    print(x,"siva",y)
msg(x="hai","good afternoon")

syntax error: positional arguments follow the keyword arguments

note:
----
the positional(non-keyword) arguments never don't follow the keyword arguments.


the normal arguments takes exactly one value at a time.

ex1:
---
def f1(x):
    print(x)
f1()

output:
-----
Traceback (most recent call last):
  File "C:/Python310/e.py", line 3, in <module>
    f1()
TypeError: f1() missing 1 required positional argument: 'x'

ex2:
----
def f1(x):
    print(x)
f1(3,4)

output:
-----
Traceback (most recent call last):
  File "C:/Python310/e.py", line 3, in <module>
    f1(3,4)
TypeError: f1() takes 1 positional argument but 2 were given

ex3:
----
def f1(x):
    print(x)
f1(3)

output:
-----
3

the normal argument type is depends on the value of that argument.

ex4:
----
def f1(x):
    print(x,type(x))
f1(3)
f1(2.3)
f1(3j)
f1("siva")
f1(True)
f1([4,3,7,2])
f1((3,9,2,8))
f1({6,3,9,4})
f1(frozenset([5,3,7,2]))
f1({'name':'siva','age':29,'sal':2000})

output:
------
3 <class 'int'>
2.3 <class 'float'>
3j <class 'complex'>
siva <class 'str'>
True <class 'bool'>
[4, 3, 7, 2] <class 'list'>
(3, 9, 2, 8) <class 'tuple'>
{9, 3, 4, 6} <class 'set'>
frozenset({2, 3, 5, 7}) <class 'frozenset'>
{'name': 'siva', 'age': 29, 'sal': 2000} <class 'dict'>


Arbitrary arguments:
-------------------
the arbitrary arguments takes 0 or more values.

by default,the arbitrary argument type is tuple

	syntax
	-------
	def functionname(*parameter):
		------
		------
		------
ex1:
----
def f1(*x):
    print(x,type(x))
f1()

output:
-------
() <class 'tuple'>

ex2:
----
def f1(*x):
    print(x,type(x))
f1(3)

output:
------
(3,) <class 'tuple'>

ex3:
----
def f1(*x):
    print(x,type(x))
f1(3,4,2)

output:
------
(3, 4, 2) <class 'tuple'>

ex4:
----
def f1(*x):
    print(x,type(x))
f1(4,2.3,4j,False)

output:
------
(4, 2.3, 4j, False) <class 'tuple'>

mixing of both normal and arbitrary arguents:
----------------------------------------------
ex1:
---
def f1(x,*y):
    print(x,type(x))
    print(y,type(y))
f1()

output:
------
Traceback (most recent call last):
  File "C:/Python310/e.py", line 4, in <module>
    f1()
TypeError: f1() missing 1 required positional argument: 'x'

ex2:
----
def f1(x,*y):
    print(x,type(x))
    print(y,type(y))
f1(5)

output:
------
5 <class 'int'>
() <class 'tuple'>

ex3:
----
def f1(x,*y):
    print(x,type(x))
    print(y,type(y))
f1(5,2.3)

output:
-------
5 <class 'int'>
(2.3,) <class 'tuple'>

ex4:
----
def f1(x,*y):
    print(x,type(x))
    print(y,type(y))
f1(4j,5,2.3,False)

output:
------
4j <class 'complex'>
(5, 2.3, False) <class 'tuple'>

mixing of both arbitrary and normal arguments:
----------------------------------------------
ex1:
---
def f1(*x,y):
    print(x,type(x))
    print(y,type(y))
f1()

output:
------
Traceback (most recent call last):
  File "C:/Python310/e.py", line 4, in <module>
    f1()
TypeError: f1() missing 1 required keyword-only argument: 'y'

ex2:
----
def f1(*x,y):
    print(x,type(x))
    print(y,type(y))
f1(5)

output:
-----
Traceback (most recent call last):
  File "C:/Python310/e.py", line 4, in <module>
    f1(5)
TypeError: f1() missing 1 required keyword-only argument: 'y'

ex3:
----
def f1(*x,y):
    print(x,type(x))
    print(y,type(y))
f1(2.3,4j,5,False)

output:
------
Traceback (most recent call last):
  File "C:/Python310/e.py", line 4, in <module>
    f1(2.3,4j,5,False)
TypeError: f1() missing 1 required keyword-only argument: 'y'

ex4:
----
def f1(*x,y):
    print(x,type(x))
    print(y,type(y))
f1(2.3,4j,5,y=False)

output:
------
(2.3, 4j, 5) <class 'tuple'>
False <class 'bool'>

kw args
--------
kw args means keyword arguments.

kw args takes 0 or more keyword arguments.

by default,the kw args type is dictiionary --> dict

	syntax
	-------
	def functionname(**parameter):
		------
		------
		------

ex1:
----
def f1(**x):
    print(x,type(x))
f1()

output:
------
{} <class 'dict'>

















