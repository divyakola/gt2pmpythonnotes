Collections:
------------
in python,the builtin collection's are

	List
	Tuple
	Set
	Frozenset
	Dictionary

List Datatype/Data structure:
-----------------------------
in python,the list datatype haveing list class

we can create a list object by using [ ] or by calling list() or list(iterableobj)

>>> x=[]
>>> x
[]
>>> type(x)
<class 'list'>

>>> y=list()
>>> y
[]
>>> type(y)
<class 'list'>

>>> z=[5,3,8,9]
>>> z
[5, 3, 8, 9]
>>> type(z)
<class 'list'>

>>> a=list("siva")
>>> a
['s', 'i', 'v', 'a']
>>> type(a)
<class 'list'>

>>> b=list([8,4,9,2])
>>> b
[8, 4, 9, 2]
>>> type(b)
<class 'list'>

>>> c=list((4,3,8,9))
>>> c
[4, 3, 8, 9]
>>> type(c)
<class 'list'>


list object is a mutable object but it allows both mutable and immutable objects.

>>> x=[3,2.3,"siva",False,4j,[6,7]]
>>> x
[3, 2.3, 'siva', False, 4j, [6, 7]]

in list object insertion order is preserved because of that reason list object is a sequence/ordered object.

list object allows duplicate elements

>>> y=[5,4,5,6,7,5,6,4]
>>> y
[5, 4, 5, 6, 7, 5, 6, 4]

list object allows both homogenious and hetrogenious elements.

	 homogenious(similar type of elements)
	------------
>>> a=[5,3,7,9]
>>> a
[5, 3, 7, 9]

>>> b=["siva","rama","krishna"]
>>> b
['siva', 'rama', 'krishna']

	hetrogenious(dissimilar/different type of elements)
	-------------
>>> x=[3,2.3,"siva",False,4j,[6,7]]
>>> x
[3, 2.3, 'siva', False, 4j, [6, 7]]


list object supporting indexing concept,in python indexing can be categorized into two typs,they are

	1).Positive/Forward indexing

	2).Negative/Backward indexing


			indexing
			   |
		-------------------------
		|			|
	Forward/Positive	Backward/Negative
		|			|
takes from Left to Right	takes from Right to Left
	(or)				(or)
takes from Top to Bottom	takes from Bottom to Top
	|				|
starts with '0'			starts with '-1'


in list object each and every element haveing unique indexing.

we can retreive one element from the list object at a time in that case we are using indexing concept.

>>> x=[3,2.3,"siva",False,4j,[6,7]]
>>> x
[3, 2.3, 'siva', False, 4j, [6, 7]]
>>> x[1]
2.3
>>> x[-2]
4j
>>> x[4]
4j
>>> x[5][0]
6
>>> x[-1][-2]
6
>>> x[-1][0]
6
>>> x[2][1]
'i'

list object supporting slicing concept.

we can retreive morethan one element from the list object at a time in that case we are using slicing concept.

>>> x=[3,2.3,"siva",False,4j,[6,7]]
>>> x
[3, 2.3, 'siva', False, 4j, [6, 7]]
>>> x[:3]
[3, 2.3, 'siva']
>>> x[-3:]
[False, 4j, [6, 7]]
>>> x[2:4]
['siva', False]
>>> x[2][:3]
'siv'
>>> x[2][-3:][::-1]
'avi'

we can update the list object elements by using indexing concept.

>>> x=[3,2.3,"siva",False,4j,[6,7]]
>>> x
[3, 2.3, 'siva', False, 4j, [6, 7]]
>>> id(x)
2023926876608
>>> x[0]=30
>>> x
[30, 2.3, 'siva', False, 4j, [6, 7]]
>>> id(x)
2023926876608
>>> x[2]="krishna"
>>> x
[30, 2.3, 'krishna', False, 4j, [6, 7]]
>>> id(x)
2023926876608
>>> x[-1]=[60,70]
>>> x
[30, 2.3, 'krishna', False, 4j, [60, 70]]
>>> id(x)
2023926876608
>>> x[-1][0]=600
>>> x
[30, 2.3, 'krishna', False, 4j, [600, 70]]
>>> id(x)
2023926876608
>>> x[2][2]='u'
TypeError: 'str' object does not support item assignment

list object supporting nested list mechanism

	nested list means we can define a list object inside another list object.


>>> a=[[],[]]
>>> a
[[], []]

>>> b=[4,5,[6,7,[9,0],8],2]
>>> b
[4, 5, [6, 7, [9, 0], 8], 2]
>>> b[2][2][0]
9
>>> b[-2][-3]
7
>>> b[-3]
5

working with functions:
-----------------------
>>> x=[5,3,7,2]
>>> x
[5, 3, 7, 2]
>>> len(x)
4
>>> min(x)
2
>>> max(x)
7
>>> sum(x)
17
>>> sorted(x)
[2, 3, 5, 7]
>>> sorted(x,reverse=True)
[7, 5, 3, 2]
>>> reversed(x)
<list_reverseiterator object at 0x000001D73B6ED810>
>>> list(reversed(x))
[2, 7, 3, 5]

ex:
---
>>> a=[3,2.3,4j,9]
>>> min(a)
TypeError: '<' not supported between instances of 'complex' and 'float'

>>> max(a)
TypeError: '>' not supported between instances of 'complex' and 'int'

>>> len(a)
4

>>> sorted(a)
TypeError: '<' not supported between instances of 'complex' and 'float'

>>> sum(a)
(14.3+4j)

>>> sum([3,2.3,4j,"siva"])
TypeError: unsupported operand type(s) for +: 'complex' and 'str'

ex:
---
>>> min([4,3.2,5,2.7])
2.7
>>> max([4,3.2,5,2.7])
5
>>> sorted([4,3.2,5,2.7])
[2.7, 3.2, 4, 5]

ex:
---
wap to return sum of 1-N natural numbers?

num=int(input("enter your number: "))
#by using while loop
"""
i=1
s=0
while i<=num:
    s+=i
    i+=1
print(s)
"""
#by using for loop
'''
s=0
for i in range(1,num+1):
    s+=i
print(s)
'''
#by using sum()
print(sum(range(1,num+1)))


output:
-------
enter your number: 10
55

working with list class methods:
--------------------------------
	help(list)

	dir(list)

examples of dunder methods:
---------------------------
>>> x=[1,2,3]
>>> y=[4,5,6]
>>> x+y
[1, 2, 3, 4, 5, 6]
>>> x.__add__(y)
[1, 2, 3, 4, 5, 6]

>>> y=[4,5,6]
>>> len(y)
3
>>> y.__len__()
3

>>> y=[4,5,6]
>>> 5 in y
True
>>> y.__contains__(5)
True

working with normal methods:
--------------------------
append()
-------
to append/add the element into the list object at the end of the previous elements in that list object.

	listobj.append(element)


>>> x=[3,2.3,4j,False]
>>> x
[3, 2.3, 4j, False]

>>> x.append(9)
>>> x
[3, 2.3, 4j, False, 9]

>>> x.append([6,7])
>>> x
[3, 2.3, 4j, False, 9, [6, 7]]

>>> x.append("siva")
>>> x
[3, 2.3, 4j, False, 9, [6, 7], 'siva']

copy()
------
to create a shallow copy of a list object

	listobj.copy()

>>> x=[3,2.3,4j,False]
>>> y=x #hardcopy
>>> z=x.copy() #shallowcopy
>>> x
[3, 2.3, 4j, False]
>>> y
[3, 2.3, 4j, False]
>>> z
[3, 2.3, 4j, False]
>>> id(x)
2023926876288
>>> id(y)
2023926876288
>>> id(z)
2023926876032
>>> x[0]=30
>>> x
[30, 2.3, 4j, False]
>>> y
[30, 2.3, 4j, False]
>>> z
[3, 2.3, 4j, False]
>>> y[1]=3.5
>>> y
[30, 3.5, 4j, False]
>>> x
[30, 3.5, 4j, False]
>>> z
[3, 2.3, 4j, False]


count()
------
to return the no.of occurencess of given element in a list object.

	listobj.count(element)

>>> x=[10,20,30,10,40,10,30,10,20,10,30]
>>> x
[10, 20, 30, 10, 40, 10, 30, 10, 20, 10, 30]
>>> x.count(10)
5
>>> x.count(30)
3
>>> x.count(20)
2
>>> x.count(40)
1
>>> x.count(50)
0

clear()
-------
to clear the list object

	(or)

to remove all the elements from the list object at a time.

	listobj.clear()


>>> x=[3,2.3,4j,False]
>>> x
[3, 2.3, 4j, False]
>>> len(x)
4
>>> x.clear()
>>> x
[]
>>> len(x)
0

extend()
--------
to extend the our list object with elements of given iterable object.

	listobj.extend(iterableobj)

>>> x=[1,2,3]
>>> y=[4,5,6]
>>> x+y
[1, 2, 3, 4, 5, 6]
>>> x
[1, 2, 3]
>>> y
[4, 5, 6]
>>> x.extend(y)
>>> x
[1, 2, 3, 4, 5, 6]
>>> y
[4, 5, 6]


>>> a=[1,2,3]
>>> b="siva"
>>> a+b
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate list (not "str") to list

>>> a.extend(b)
>>> a
[1, 2, 3, 's', 'i', 'v', 'a']
>>> b
'siva'


assignment-1:
-------------
wap to seperate the list object into two list objects,one list object contains even numbers and another list contains odd numbers?

input:
	[5,8,3,9,4,6,12,15,1,0,10,13]

output:
	[[8,4,6,12,0,10],[5,3,9,15,1,13]]

	[[0,4,6,8,10,12],[15,13,9,5,3,1]]

assignment-2:
------------
take the input as a string object,to return the output as list object,that list object contains two sublists,one list contains Vowels and another list contains consonents.

input:
-----
	hai siva krishna

output:
	[['a','i','i','a','i','a'],         ['h','s','v','k','r','s','h','n']]









































































